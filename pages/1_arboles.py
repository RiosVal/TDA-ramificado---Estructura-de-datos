import streamlit as st
from codigos.arboles.arboles import *
from codigos.arboles.rbTree import *

def intro():
    st.header("游꺕")
    st.title(':green[츼rboles]')
    st.write(
        """
        Los 치rboles son estructuras de datos que se caracterizan por almacenar sus nodos en forma jer치rquica, a diferencia de las listas
        que los almacenan en forma lineal.
        """,
    )
    
    st.header(":green[Importante entender]")
    st.write("""Los 치rboles se componen de los siguientes elementos:""")

def importante_saber():
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("<b>Nodo</b>: cada elemento que contiene un 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Nodo ra칤z</b>: primer nodo de un 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Nodo padre</b>: aquellos nodos que tienen al menos un hijo y est치 directamente superior a el", unsafe_allow_html=True)
        st.markdown("<b>Nodo hijo</b>: todos quellos que tienen un padre", unsafe_allow_html=True)    
        st.markdown("<b>Nodo hermano</b>: los nodos que comparten a un mismo padre", unsafe_allow_html=True)
        st.markdown("<b>Nodo hoja</b>: nodos que no tienen hijos", unsafe_allow_html=True)
        st.markdown("<b>Nodo rama</b>: aquellos nodos que no son ra칤z y tienen al menos un hijo", unsafe_allow_html=True)
        st.markdown("<b>Decendiente</b>: nodo que est치 en un nivel inferior en relaci칩n con otro nodo espec칤fico", unsafe_allow_html=True)
    with col2:
        st.markdown("<b>Ancestro</b>: nodo que est치 en un nivel superior en relaci칩n con otro nodo espec칤fico", unsafe_allow_html=True)
        st.markdown("<b>Nodo interno</b>: nodo que tiene al menos un hijo", unsafe_allow_html=True)
        st.markdown("<b>Camino</b>: secuencia de nodos conectados entre s칤 en el 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Nivel de un nodo</b>: posici칩n relativa de un nodo en el 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Nivel de un 치rbol</b>: es el nivel m치s alto entre todos los nodos del 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Altura de un nodo</b>: es la longitud del camino m치s largo desde ese nodo hasta un nodo terminal", unsafe_allow_html=True)
        st.markdown("<b>Altura de un 치rbol</b>: es la longitud m치xima del camino desde la ra칤z hasta el nodo m치s alejado", unsafe_allow_html=True)
        st.markdown("<b>Peso de un nodo</b>: valor asociado o atributo num칠rico asociado al nodo", unsafe_allow_html=True)
    with col3:
        st.markdown("<b>Peso de un 치rbol</b>: suma de los persos de todos los nodos de ese 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Orden</b>: n칰mero m치ximo de hijos que puede tener un nodo", unsafe_allow_html=True)
        st.markdown("<b>Grado</b>: numero mayor d ehijos que tiene alguno de los nodos del 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Profundidad</b>: distancia entre un nodo dado y la ra칤z del 치rbol", unsafe_allow_html=True)
        st.markdown("<b>Bosque</b>: coleccion de 치rboles disjuntos, donde cada 치tbol puede tener su propia ra칤z y nodos", unsafe_allow_html=True)
        st.markdown("<b>Sub-치rbol</b>: es todo 치rbol generado a partir de una secci칩n determinada del 치rbol", unsafe_allow_html=True)

def tabs():
    tab1, tab2, tab3, tab4 = st.tabs(["츼rbol", "Ra칤z, rama, hoja", "Nodos padre e hijos", "Hermanos"])

    with tab1:
        st.image("images/arboles/arbol.png")
    with tab2:
        st.image("images/arboles/RaizRamaHoja.png")
    with tab3:
        st.image("images/arboles/padreHijo.png")
    with tab4:
        st.image("images/arboles/padreHermanos.png")

def tipos():
    st.header('Tipos')
    col1, col2 = st.columns(2)

    with col1:
        st.subheader('츼rbol n-ario')
        st.markdown("Aquellos arboles donde el n칰mero m치ximo de hijos por nodo es de N.", unsafe_allow_html=True)
    with col2:
        st.subheader('츼rbol binario')
        st.markdown("츼rbol n-ario de Grado 2, cada nodo solo puede tener m치ximo 2 hijos.", unsafe_allow_html=True)
    
    st.header('츼rboles rojo negro')
    st.write(
        '''
        Son una estructura de datos basada en 치rboles binarios de b칰squeda que se utiliza para mantener los elementos de 
        manera ordenada y equilibrada. Estos 치rboles se llaman as칤 debido a las propiedades de sus nodos, que son etiquetados 
        como "rojos" o "negros".
        '''
    )
    st.subheader('Caracter칤sticas')
    st.markdown(
        '''
        - Cada nodo es etiquetado como rojo o negro.
        - La ra칤z del 치rbol siempre es de color negro.
        - Todos los nodos hoja (nodos nulos o NIL) son considerados negros.
        - Si un nodo es rojo, entonces sus hijos deben ser negros.
        - Cada camino desde un nodo hasta sus nodos descendientes contiene la misma cantidad de nodos negros. Esto se conoce 
        como la "propiedad del n칰mero de nodos negros".
        - El camino m치s largo es dos veces el camino mas corto.
        - Todo nodo que se inserta es rojo.
        '''
    )
    st.write(
        '''
        Estas reglas garantizan que un 치rbol rojo-negro est칠 equilibrado y tenga una altura logar칤tmica, lo que resulta en un 
        tiempo de ejecuci칩n eficiente para operaciones de b칰squeda, inserci칩n y eliminaci칩n.'''
    )
    st.subheader('_Inserci칩n_')
    insertar_nodos_rbTree()

def reglas_binarios():
    st.header("Reglas de los 치rboles binarios")
    st.markdown(
        """
            - Siempre va a haber un nodo raiz
            - Los datos menores o iguales a la ra칤z van a la izquierda
            - Los datos mayores van a la derecha de la ra칤z
        """ 
    )

def ejercicios_basicos():
    st.header("Ejercicios")
    st.write("""A continuaci칩n te mostraremos ejercicios para que apliques lo aprendido, la soluci칩n se muestra una vez indiques en el bot칩n
            que quieres verla, sin embargo te recomendamos que intentes resolverlo tu solo para tu mejor comprensi칩n. Recuerda que la mejor manera de 
            aprender es haci칠ndolo tu mismo.""")
    ejercicio1()
    ejercicio2()
    ejercicio3()

def usos():
    st.header('Usos')
    st.markdown(
        """
        - Estructuras datos: para almacenar y organizar informaci칩n de manera eficiente. Los 치rboles binarios de b칰squeda, 
        los 치rboles AVL y los 치rboles B son ejemplos de estructuras de datos basadas en 치rboles que permiten realizar 
        operaciones de b칰squeda, inserci칩n y eliminaci칩n de manera eficiente.
        - B칰squeda y recuperaci칩n de informaci칩n: Los 치rboles se utilizan en algoritmos de b칰squeda y recuperaci칩n de 
        informaci칩n. Los 치rboles de b칰squeda binarios y los 치rboles de b칰squeda equilibrados como el 치rbol B son 칰tiles 
        para realizar b칰squedas eficientes en grandes conjuntos de datos.
        - Compresi칩n de datos: Los 치rboles se utilizan en algoritmos de compresi칩n de datos, como el 치rbol de Huffman, 
        que permite la compresi칩n de datos sin p칠rdida. Estos 치rboles asignan c칩digos de longitud variable a los s칤mbolos 
        de entrada, asignando c칩digos m치s cortos a los s칤mbolos m치s frecuentes y c칩digos m치s largos a los menos frecuentes.
        - An치lisis y optimizaci칩n de algoritmos: Los 치rboles se utilizan para analizar y optimizar el rendimiento de algoritmos. 
        Por ejemplo, el an치lisis del 치rbol de recursi칩n se utiliza para determinar la complejidad y eficiencia de algoritmos recursivos.
        - Estructuras de representaci칩n y organizaci칩n: Los 치rboles se utilizan para representar y organizar estructuras jer치rquicas 
        en diversas aplicaciones. Por ejemplo, los 치rboles se utilizan para representar la estructura de directorios en un sistema de 
        archivos, la estructura de una p치gina web, la jerarqu칤a de categor칤as en un sistema de gesti칩n de contenidos, entre otros.
        - Inteligencia artificial y aprendizaje autom치tico: Los 치rboles de decisi칩n y los bosques aleatorios (random forests) 
        se utilizan en aplicaciones de inteligencia artificial y aprendizaje autom치tico para la clasificaci칩n y toma de decisiones. 
        Estos 치rboles se utilizan para construir modelos predictivos basados en reglas de decisi칩n.
        """
    )

intro()
importante_saber()
tabs()
tipos()
usos()
st.divider()
reglas_binarios()
code_binary_tree()
st.divider()
ejercicios_basicos()
