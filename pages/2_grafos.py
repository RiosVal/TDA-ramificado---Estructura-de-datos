import streamlit as st
from codigos.grafos.grafos_dij import *
from codigos.grafos.grafos import *
from codigos.grafos.rbGraphs import *
from codigos.grafos.grafos_eje import *
from codigos.grafos.grafos_matriz import *



def intro():
    st.header("üï∏Ô∏è")

    st.markdown('<h1>Grafos</h1>', unsafe_allow_html=True)
    st.markdown(
        """
          <p>
             Un grafo es una estructura de datos no lineal que consta de v√©rtices y aristas.
             Los v√©rtices a veces tambi√©n se denominan nodos y los bordes son l√≠neas o arcos que conectan dos nodos en el grafo. 
             M√°s formalmente, 
             un grafo se compone de un conjunto de v√©rtices 
             (V) y un conjunto de aristas (E). El grafo se denota por G(E, V).

         </p>


    """, unsafe_allow_html=True)

def importante_saber():
    st.markdown("<h2> Importante entender </h2>", unsafe_allow_html=True)
    st.markdown("""<p> Los Grafos se componen por los siguientes elementos:</p>""", unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    # with col1: 
    #     st.markdown("- <b> Vertices:</b> son las unidades fundamentales del grafo. A veces, los v√©rtices tambi√©n se conocen como v√©rtices o nodos. Cada nodo/v√©rtice se puede etiquetar o no etiquetar.", unsafe_allow_html=True)
    #     st.markdown("- <b> Adyacencia: </b> ", unsafe_allow_html=True)
    with col1:
        st.markdown("- <b> Vertices:</b> son las unidades fundamentales del grafo. A veces, los v√©rtices tambi√©n se conocen como v√©rtices o nodos. Cada nodo/v√©rtice se puede etiquetar o no etiquetar.", unsafe_allow_html=True)
        st.markdown("- <b>Adyacencia:</b> Representa una lista de vertices ", unsafe_allow_html=True)
        st.markdown("- <b>Camino:</b> Es una secuencia de arcos, la cual cada extremo coincide con el inicio y el final", unsafe_allow_html=True)
        st.markdown("- <b>Longitud de camino:</b> Es el n√∫mero de numero de aristas que la forman ",unsafe_allow_html=True)


    with col2:
        st.markdown("- <b> Aristas: </b> Las aristas se dibujan o se usan para conectar dos nodos del gr√°fico. Se puede ordenar un par de nodos en un gr√°fico dirigido. Las aristas pueden conectar dos nodos cualesquiera de cualquier forma posible. Las aristas tambi√©n se conocen como arcos. Cada arista se puede etiquetar/desetiquetar. </b>",unsafe_allow_html=True)
        st.markdown("- <b> Etiqueta de arista:</b> son aquellos en los que las aristas tienen una etiqueta o peso asociado que representa alguna caracter√≠stica o propiedad espec√≠fica ",unsafe_allow_html=True)
        st.markdown("- <b> Conexo:</b> todos sus vertices tine una relacion o una forma de comunicarse entre si ya se simple o relacionandose a traves de uno a m√°s aristas",unsafe_allow_html=True)
    st.image("images/grafos/partes grafos.png")
def tabs():
    tab1,tab2,tab3,tab4,tab5,tab6= st.tabs(["Grafos no dirigidos","Grafos dirigidos"," Camino hamiltoneano","Camino euleriano","Grafos aciclico","Grafos ponderados"])

    with tab1: #GRAFOS NO DIRIGIDOS
        #   st.image()
        st.markdown("""

        <p> Un grafo en el que los bordes no tienen direcci√≥n, es decir, los bordes no tienen flechas que indiquen la direcci√≥n de recorrido. Ejemplo: un grafo de red social donde las amistades no son direccionales.</p>

        """,unsafe_allow_html=True)
        st.image("images/grafos/g.no dirigidos.png")
    with tab2: #GRAFOS DIRIGIDOS
        #st.image()
        st.markdown("""

     <p> Un grafo en el que los bordes tienen una direcci√≥n, es decir, los bordes tienen flechas que indican la direcci√≥n de recorrido. Ejemplo: un grafo de p√°gina web donde los enlaces entre p√°ginas son direccionales. </p>

        """,unsafe_allow_html=True)
        st.image("images/grafos/g.dirigidos.png")
    with tab3: #Camino hamiltoneano
        #st.image()
        st.markdown("""

            <p>En el campo matem√°tico de la teor√≠a de grafos, es un camino
            de un grafo, una sucesi√≥n de aristas adyacentes, que visita
            todos los v√©rtices del grafo una sola vez. Si adem√°s el √∫ltimo
            v√©rtice visitado es adyacent al primero, el camino es un ciclo
            hamiltoniano.</p>
         """,unsafe_allow_html=True)
        st.image("images/grafos/hamiltoniano.png")
    with tab4: #camino euleriano
        #st.image()
        st.markdown("""

        <p> Un ciclo euleriano es un Camino en un grafo que
        comienza y termina en el mismgv√©rtice, que incluye
        cada arista del grafo exactamente una vez y que
        puede tener v√©rtices repetidos, es decir, un ciclo que
        incluye todas las aristas y que estas no se repitan.
        .</p>

        """,unsafe_allow_html=True)
        st.image("images/grafos/euleriano.png")
    with tab5: #GRAFOS aciclico
        #st.image()
        st.markdown("""

        <p>es aquel en el que no hay ciclos, lo que significa que no se puede seguir una secuencia de aristas y nodos que forme un camino cerrado. En un grafo ac√≠clico, los caminos siempre van en una direcci√≥n, lo que hace que su estructura sea m√°s simple y f√°cil de analizar..</p>

        """,unsafe_allow_html=True)
        st.image("images/grafos/aciclico.png")
    with tab6: #Grafos ponderados
        st.markdown("""

        <p>Un grafo ponderado es una estructura de datos que consiste en un conjunto de v√©rtices o nodos interconectados mediante aristas o arcos, donde cada arista tiene asignado un valor num√©rico conocido como peso o costo. Estos pesos representan la medida de la distancia, costo, tiempo u otra propiedad asociada a la conexi√≥n entre los nodos.
        </p>

        """,unsafe_allow_html=True)
        st.image("images/grafos/grafos ponderados.png")    


def  usos_reglas():
    st.subheader("Usos")
    st.markdown(
    """
    -Representaci√≥n de redes: Los grafos se utilizan para representar redes de computadoras, sistemas de comunicaci√≥n y redes sociales. Los nodos del grafo representan los elementos de la red, como routers, servidores, usuarios, etc. Las aristas del grafo representan las conexiones entre los nodos, como cables, enrutadores, conexiones de red, etc.

    -An√°lisis de algoritmos: Los grafos se utilizan para analizar el rendimiento de los algoritmos. Por ejemplo, se puede representar el flujo de datos y el costo de las operaciones en un algoritmo mediante un grafo. Luego, se pueden aplicar t√©cnicas de an√°lisis de grafos para optimizar el algoritmo y mejorar su rendimiento.

    -Optimizaci√≥n de rutas: Los grafos se utilizan para encontrar la mejor ruta entre dos puntos en una red. Por ejemplo, se puede utilizar un algoritmo de b√∫squeda en grafos para encontrar la ruta m√°s corta entre dos ciudades en un mapa.

    -Miner√≠a de datos: Los grafos se utilizan para modelar y analizar datos complejos, como redes sociales, sistemas de recomendaci√≥n y patrones de tr√°fico en la web. Los grafos pueden utilizarse para identificar comunidades, nodos influyentes y patrones de comportamiento en grandes conjuntos de datos.

    -Modelado de sistemas: Los grafos se utilizan para modelar sistemas complejos, como sistemas de control de procesos industriales, sistemas de transporte, sistemas de energ√≠a el√©ctrica, etc. Los grafos se utilizan para representar los componentes del sistema, las interacciones entre ellos y las restricciones y objetivos del sistema.
    """
    )

    st.divider()
    st.header("En estructura de datos se utilizan  los grafos, y existen unas reglas:")
    st.subheader("Reglas")
    st.markdown(
    """
        - Definir los nodos y aristas: Primero, debes definir los nodos o v√©rtices del grafo, as√≠ como las aristas o conexiones entre ellos. Puedes asignar identificadores √∫nicos a cada nodo para facilitar su referencia.
        - Elegir una estructura de datos adecuada: Selecciona una estructura de datos que se ajuste a tus necesidades y al tipo de operaciones que planeas realizar con el grafo. Las opciones comunes son la matriz de adyacencia y la lista de adyacencia, como se mencion√≥ anteriormente.
        - Implementar funciones b√°sicas: Debes implementar funciones b√°sicas para trabajar con grafos, como agregar un nodo, agregar una arista, eliminar un nodo, eliminar una arista, buscar nodos adyacentes, etc. Estas funciones variar√°n seg√∫n la estructura de datos que est√©s utilizando.
        - Considerar la direcci√≥n de las aristas: Puedes optar por trabajar con un grafo dirigido (las aristas tienen una direcci√≥n) o un grafo no dirigido (las aristas no tienen direcci√≥n). Esta elecci√≥n afectar√° la forma en que almacenas y procesas las aristas.
        - Manejar la conectividad: Aseg√∫rate de manejar adecuadamente la conectividad del grafo. Esto implica garantizar que no haya nodos o aristas duplicados, y que los nodos est√©n correctamente conectados entre s√≠.
        - Implementar algoritmos y operaciones: Puedes aplicar algoritmos y operaciones espec√≠ficas a los grafos seg√∫n tus necesidades, como b√∫squeda en profundidad, b√∫squeda en amplitud, algoritmos de recorrido, algoritmos de b√∫squeda de caminos m√°s cortos, algoritmos de √°rbol de expansi√≥n m√≠nima, entre otros.
    """
    )


def definciones():
    st.header("Adyacencia")
    st.markdown(
     """
    La adyacencia en grafos se refiere a la relaci√≥n entre dos nodos o v√©rtices que est√°n conectados por una arista. Dos nodos se consideran adyacentes si existe una arista que los conecta. En otras palabras, la adyacencia indica que dos nodos est√°n directamente conectados en un grafo. La adyacencia puede ser bidireccional o unidireccional, dependiendo de si las aristas tienen una direcci√≥n o no. La informaci√≥n sobre la adyacencia de los nodos en un grafo es fundamental para realizar operaciones y an√°lisis sobre el mismo, como encontrar rutas, determinar la conectividad o calcular distancias entre nodos.
    """
    )
    #posible imagen


    st.divider()
    st.header("Caminos & longitud de un camino")
    st.markdown(
    """
     un camino es una secuencia de nodos conectados en el que cada par de nodos consecutivos est√° unido por una arista. En otras palabras, es una ruta que permite ir desde un nodo inicial a un nodo final pasando por una serie de nodos intermedios, siguiendo las conexiones del grafo.

    Un camino puede ser de longitud cero si se trata de un solo nodo, y puede ser de longitud uno si hay una arista directa entre dos nodos. La longitud de un camino se mide por el n√∫mero de aristas que contiene.

    Los caminos en los grafos son utilizados para analizar la conectividad entre nodos, encontrar rutas m√°s cortas entre dos nodos espec√≠ficos, determinar si existe un camino entre dos nodos, o identificar componentes conectados dentro de un grafo.

    Existen diferentes tipos de caminos en grafos, como el camino simple (no se repiten nodos en el camino), el camino c√≠clico (donde el nodo inicial y final son el mismo), y el camino ponderado (donde cada arista tiene asignado un peso o costo).

    El estudio y an√°lisis de los caminos en grafos es fundamental en la teor√≠a de grafos y es aplicado en diversos campos, como redes de comunicaci√≥n, algoritmos de navegaci√≥n, an√°lisis de redes sociales, optimizaci√≥n de rutas, entre otros.
    """
    )

    st.image("images/grafos/Camino.png")

    st.divider()
    st.header("Etiqueta de una arista")
    st.markdown(
    """
    En el contexto de los grafos, una etiqueta de arista se refiere a un valor o atributo asociado a una arista espec√≠fica. Es una informaci√≥n adicional que se puede asignar a una arista para representar alguna caracter√≠stica o propiedad relacionada con la conexi√≥n que representa. Estas etiquetas pueden ser num√©ricas, de texto o incluso estructuras de datos m√°s complejas, dependiendo de las necesidades espec√≠ficas del problema que se est√© abordando. Las etiquetas de arista son √∫tiles para representar informaci√≥n como el peso de una conexi√≥n, el costo de atravesar una arista, el tipo de relaci√≥n entre dos nodos o cualquier otra informaci√≥n relevante para el grafo en cuesti√≥n.
    """
    )
    #posible imagen
    st.image("images/grafos/Etiquetas.png")

    st.divider()
    st.header("conexo")
    st.markdown(
    """
    En un grafo, se dice que es conexo si existe un camino entre cualquier par de nodos del grafo. En otras palabras, todos los nodos del grafo est√°n conectados entre s√≠ de alguna manera. Si hay al menos un par de nodos que no est√°n conectados por ning√∫n camino, entonces el grafo se considera no conexo. En un grafo no dirigido, la noci√≥n de conexidad implica que la relaci√≥n de conexi√≥n es sim√©trica, es decir, si el nodo A est√° conectado con el nodo B, entonces el nodo B tambi√©n est√° conectado con el nodo A.
    """
    )   

    st.divider()
    st.header("grafo dirigido y  grafo no dirigido")
    st.markdown(
    """
        -Grafo dirigido: Un grafo dirigido, tambi√©n conocido como digrafo, es un tipo de grafo donde las aristas tienen una direcci√≥n asociada. Esto significa que la conexi√≥n entre dos nodos va en una direcci√≥n espec√≠fica, lo que implica que se puede viajar desde un nodo inicial a un nodo final siguiendo la direcci√≥n de las aristas. En un grafo dirigido, las aristas se representan con flechas o arcos para indicar la direcci√≥n.
        
        -Grafo no dirigido: Un grafo no dirigido es un tipo de grafo donde las aristas no tienen una direcci√≥n asociada. En otras palabras, la conexi√≥n entre dos nodos es bidireccional, lo que significa que se puede viajar en ambas direcciones entre los nodos sin restricciones. En un grafo no dirigido, las aristas se representan con l√≠neas sin flechas para indicar que la conexi√≥n es sim√©trica.
    """
    )
    st.subheader("conclusiones")
    st.markdown(
    """la principal diferencia entre un grafo dirigido y un grafo no dirigido radica en la direcci√≥n de las aristas: en un grafo dirigido, las aristas tienen una direcci√≥n espec√≠fica, mientras que en un grafo no dirigido, las aristas no tienen direcci√≥n y la conexi√≥n es bidireccional.
    """
    )

def codigos():
    code_grafos()

def dijkstra():
    cod_dijkstra()
    

def adye():
    in_adya()

def vec():
    in_vec()

def matriz():    
    in_matriz()


def ejercicios_basicos():
    st.subheader("Ejercicio")
    st.markdown(
    """
    A continuaci√≥n, te mostraremos ejercicios para que apliques lo aprendido, la soluci√≥n se muestra una vez indiques en el bot√≥n
            que quieres verla, sin embargo, te recomendamos que intentes resolverlo tu solo para tu mejor comprensi√≥n. Recuerda que la mejor manera de 
            aprender es haci√©ndolo t√∫ mismo.
    """
    )
    ejercicio1()
    graficar_comunicacion_redes()
    ejercicio2()
    encontrar_camino_mas_corto()
    ejercicio3()
    encontrar_componentes_conectados()

def page():
    #menu donde el  usrauario podra ver los temas y codigos que tiene que ver con un grafo#
    """Organizaci√≥n de la p√°gina √°rboles"""
    intro()
    opcion = st.selectbox(
        'Escoge el tema  desplegar',
        (
            '',
            'Definiciones importantes',
            'Usos y reglas',
            'Informaci√≥n detallada',
            'Codigo de los grafos',
            'Codigo de dijkstra',
            'Codigo de matriz de adyacencia',
            'Codigo de matriz de vectores',
            'Codigo de matriz de lista',
            'Ejercicios b√°sicos de comprensi√≥n'
        )
    )
    #opciones delm menu
    if opcion == 'Definiciones importantes':
        importante_saber()
        tabs()
    elif opcion == 'Usos y reglas':
        usos_reglas()
    elif opcion == 'Informaci√≥n detallada':
        definciones()
    elif opcion == 'Codigo de los grafos':
        codigos()
    elif opcion == 'Codigo de dijkstra':
        dijkstra()
    elif opcion == 'Codigo de matriz de adyacencia':
        adye()
    elif opcion == 'Codigo de matriz de vectores':
        vec()
    elif opcion == 'Codigo de matriz de lista':
        matriz()
    elif opcion == 'Ejercicios b√°sicos de comprensi√≥n':
        ejercicios_basicos()
page()
