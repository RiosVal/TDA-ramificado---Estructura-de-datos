import streamlit as st

st.header("üï∏Ô∏è")
st.markdown('<h1>Grafos</h1>', unsafe_allow_html=True)
st.markdown(
    """
        <p>
            Un grafo es una estructura de datos no lineal que consta de v√©rtices y aristas.
             Los v√©rtices a veces tambi√©n se denominan nodos y los bordes son l√≠neas o arcos que conectan dos nodos en el grafo. 
             M√°s formalmente, 
             un grafo se compone de un conjunto de v√©rtices 
             (V) y un conjunto de aristas (E). El grafo se denota por G(E, V).

        </p>


""", unsafe_allow_html=True)

st.markdown("<h2> Importante entender </h2>", unsafe_allow_html=True)
st.markdown("""<p> Los Grafos se componen por los siguientes elementos:</p>""", unsafe_allow_html=True)

col1, col2 = st.columns(2)

# with col1: 
#     st.markdown("- <b> Vertices:</b> son las unidades fundamentales del grafo. A veces, los v√©rtices tambi√©n se conocen como v√©rtices o nodos. Cada nodo/v√©rtice se puede etiquetar o no etiquetar.", unsafe_allow_html=True)
#     st.markdown("- <b> Adyacencia: </b> ", unsafe_allow_html=True)
with col1:
    st.markdown("- <b> Vertices:</b> son las unidades fundamentales del grafo. A veces, los v√©rtices tambi√©n se conocen como v√©rtices o nodos. Cada nodo/v√©rtice se puede etiquetar o no etiquetar.", unsafe_allow_html=True)
    st.markdown("- <b>Adyacencia:</b> Representa una lista de vertices ", unsafe_allow_html=True)
    st.markdown("- <b>Camino:</b> Es una secuencia de arcos , la cual cada extremo coincide con el inicio y el final", unsafe_allow_html=True)
    st.markdown("- <b>Longitud de camino:</b> Es el numero de numero de aristas que la forman ",unsafe_allow_html=True)


with col2:
    st.markdown("- <b> Aristas: </b> Las aristas se dibujan o se usan para conectar dos nodos del gr√°fico. Se puede ordenar un par de nodos en un gr√°fico dirigido. Las aristas pueden conectar dos nodos cualesquiera de cualquier forma posible. Las aristas tambi√©n se conocen como arcos. Cada arista se puede etiquetar/desetiquetar. </b>",unsafe_allow_html=True)
    st.markdown("- <b> Etiqueta de arista:</b> Falta ",unsafe_allow_html=True)
    st.markdown("- <b> Conexo:</b> pppp",unsafe_allow_html=True)


tab1,tab2,tab3,tab4,tab5 = st.tabs(["Grafos no dirigidos","Grafos dirigidos","Grafos Ponderado","Grafos No Ponderado","Grafos Completos"])

with tab1: #GRAFOS NO DIRIGIDOS
    #   st.image()
    st.markdown("""

    <p> Un grafo en el que los bordes no tienen direcci√≥n, es decir, los bordes no tienen flechas que indiquen la direcci√≥n de recorrido. Ejemplo: un grafo de red social donde las amistades no son direccionales.</p>

    """,unsafe_allow_html=True)
    st.image("images/grafos/grafosimple.png")
with tab2: #GRAFOS DIRIGIDOS
    #st.image()
    st.markdown("""

    <p> Un grafo en el que los bordes tienen una direcci√≥n, es decir, los bordes tienen flechas que indican la direcci√≥n de recorrido. Ejemplo: un grafo de p√°gina web donde los enlaces entre p√°ginas son direccionales. </p>

    """,unsafe_allow_html=True)
with tab3: #GRAFOS PONDERADOS
    #st.image()
    st.markdown("""

    <p> Un grafo en el que los bordes tienen pesos o costos asociados con ellos. Ejemplo: un grafo de red de carreteras donde los pesos pueden representar la distancia entre dos ciudades. </p>

    """,unsafe_allow_html=True)
with tab4: #GRAFOS NO PONDERADOS
    #st.image()
    st.markdown("""

    <p> 
Un grafo en el que los bordes no tienen pesos ni costes asociados. Ejemplo: un grafo de red social donde los bordes representan amistades.</p>

    """,unsafe_allow_html=True)
with tab5: #GRAFOS COMPLETOS
    #st.image()
    st.markdown("""

    <p> Un grafo en el que cada v√©rtice est√° conectado a todos los dem√°s v√©rtices. Ejemplo: un grafo de torneo donde cada jugador juega contra todos los dem√°s jugadores</p>

    """,unsafe_allow_html=True)


tab6,tab7,tab8,tab9,tab10 = st.tabs(["Grafos Bipartitos","Arboles","Ciclos","Grafos Dispersos","Grafos Densos"])

with tab6: #GRAFOS BIPARTITOS
    #st.image()
    st.markdown("""

    <p> </p>

    """)
with tab7: #GRAFOS Simples
    #st.image()
    st.markdown("""

    <p> </p>

    """)
with tab8: #CICLOS
   # st.image()
    st.markdown("""

    <p> </p>

    """)
with tab9: #GRAFOS DISPERSOS
   # st.image()
    st.markdown("""

    <p> </p>

    """)
with tab10: #GRAFOS 
   # st.image()
    st.markdown("""

    <p> </p>

    """)
#Aqui empieza como esta enlazada con estructura de datos
st.divider()
st.header("En estructura de datos se utilizan  los grafos, y existen unas reglas:")
st.subheader("Reglas")
st.markdown(
    """
        - Definir los nodos y aristas: Primero, debes definir los nodos o v√©rtices del grafo, as√≠ como las aristas o conexiones entre ellos. Puedes asignar identificadores √∫nicos a cada nodo para facilitar su referencia.
        - Elegir una estructura de datos adecuada: Selecciona una estructura de datos que se ajuste a tus necesidades y al tipo de operaciones que planeas realizar con el grafo. Las opciones comunes son la matriz de adyacencia y la lista de adyacencia, como se mencion√≥ anteriormente.
        - Implementar funciones b√°sicas: Debes implementar funciones b√°sicas para trabajar con grafos, como agregar un nodo, agregar una arista, eliminar un nodo, eliminar una arista, buscar nodos adyacentes, etc. Estas funciones variar√°n seg√∫n la estructura de datos que est√©s utilizando.
        - Considerar la direcci√≥n de las aristas: Puedes optar por trabajar con un grafo dirigido (las aristas tienen una direcci√≥n) o un grafo no dirigido (las aristas no tienen direcci√≥n). Esta elecci√≥n afectar√° la forma en que almacenas y procesas las aristas.
        - Manejar la conectividad: Aseg√∫rate de manejar adecuadamente la conectividad del grafo. Esto implica garantizar que no haya nodos o aristas duplicados, y que los nodos est√©n correctamente conectados entre s√≠.
        - Implementar algoritmos y operaciones: Puedes aplicar algoritmos y operaciones espec√≠ficas a los grafos seg√∫n tus necesidades, como b√∫squeda en profundidad, b√∫squeda en amplitud, algoritmos de recorrido, algoritmos de b√∫squeda de caminos m√°s cortos, algoritmos de √°rbol de expansi√≥n m√≠nima, entre otros.
    """
)


#Faltan los codigos y las imagenes de cada cosa , organizenle el texto de grafos bipartitos y lo demas   de poner mas texto 
#Toca poner cada definicion pero pues si a cada uno lo encarge de algo pues cumplan lo y hagamos que todo funcione bien ya que ya la reunion es hoy a las 4 

